{
	"id": "7039b83d1bf407198e63be0cfcd0b734",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"Final Smart Contract/testDAO.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// import \"./Token.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// contract DataDAO is Ownable {\n//     DeSearch public tokenContract;\n\n//     struct Member {\n//         uint256 tokenBalance;\n//         bool isMember;\n//     }\n\n//     struct ResearchProject {\n//         address researcher;\n//         string title;\n//         uint256 category;\n//         string coverImage;\n//         string _abstract;\n//         string description;\n//         string researchWorkFile;\n//         string github_link;\n//         string references;\n//         uint256 totalVotes;\n//         mapping(address => uint256) votes;\n//         uint256 deadline;\n//     }\n\n//     mapping(address => Member) public members;\n//     mapping(uint256 => ResearchProject) public researchProjects;\n//     uint256 public numberOfProjects;\n//     uint256 public daoBalance;\n\n//     modifier onlyMember() {\n//         require(\n//             members[msg.sender].isMember,\n//             \"Only members can access this function\"\n//         );\n//         _;\n//     }\n\n//     constructor(address tokenAddress) {\n//         tokenContract = DeSearch(tokenAddress);\n//     }\n\n//     function addMember(uint256 amount) external {\n//         require(amount > 0, \"Amount must be greater than 0\");\n//         require(\n//             tokenContract.balanceOf(msg.sender) >= amount,\n//             \"Insufficient token balance\"\n//         );\n\n//         tokenContract.transferFrom(msg.sender, address(this), amount);\n//         members[msg.sender].tokenBalance += amount;\n//         members[msg.sender].isMember = true;\n//     }\n\n//     function removeMember(address memberAddress) public onlyOwner {\n//         require(members[memberAddress].isMember, \"Address is not a member\");\n\n//         uint256 memberBalance = members[memberAddress].tokenBalance;\n//         tokenContract.transfer(memberAddress, memberBalance);\n//         members[memberAddress].tokenBalance = 0;\n//         members[memberAddress].isMember = false;\n//     }\n\n//     function isMember(address account) public view returns (bool) {\n//         return members[account].isMember;\n//     }\n\n//     function fundDAO() public payable {\n//         require(msg.value > 0, \"Funding amount must be greater than 0\");\n//         daoBalance += msg.value;\n//     }\n\n//     function withdrawFund(uint256 amount) public onlyOwner {\n//         require(amount <= daoBalance, \"Insufficient DAO balance\");\n\n//         daoBalance -= amount;\n//         payable(owner()).transfer(amount);\n//     }\n\n//     function createResearchProject(\n//         address _researcher,\n//         string memory title,\n//         uint256 category,\n//         string memory coverImage,\n//         string memory _abstract,\n//         string memory description,\n//         string memory researchWorkFile,\n//         string memory github_link,\n//         string memory references\n//     )\n//         public\n//         //uint256 deadline\n//         onlyOwner\n//         returns (uint256)\n//     {\n//         require(msg.sender == owner(), \"Only DAO owner can create projects\");\n\n//         ResearchProject storage project = researchProjects[numberOfProjects];\n//         project.researcher = _researcher;\n//         project.title = title;\n//         project.category = category;\n//         project.coverImage = coverImage;\n//         project._abstract = _abstract;\n//         project.description = description;\n//         project.researchWorkFile = researchWorkFile;\n//         project.github_link = github_link;\n//         project.references = references;\n//         project.deadline = block.timestamp + (90 days); // Set the deadline based on the provided duration\n\n//         numberOfProjects++;\n\n//         return numberOfProjects - 1;\n//     }\n\n//     function voteForProject(uint256 projectId, uint256 voteCount)\n//         public\n//         onlyMember\n//     {\n//         require(projectId < numberOfProjects, \"Invalid project ID\");\n//         require(voteCount > 0 && voteCount <= 4, \"Invalid vote count\");\n\n//         ResearchProject storage project = researchProjects[projectId];\n\n//         uint256 voteAmount = calculateVoteAmount(\n//             project.totalVotes + voteCount\n//         );\n//         require(\n//             tokenContract.balanceOf(msg.sender) >= voteAmount,\n//             \"Insufficient token balance for voting\"\n//         );\n\n//         project.totalVotes += voteCount;\n//         project.votes[msg.sender] += voteCount;\n\n//         tokenContract.transferFrom(msg.sender, address(this), voteAmount);\n//     }\n\n//     function calculateVoteAmount(uint256 voteCount)\n//         internal\n//         pure\n//         returns (uint256)\n//     {\n//         if (voteCount == 1) {\n//             return 10; // 10 DeSearch Tokens for the first vote\n//         } else if (voteCount == 2) {\n//             return 50; // 50 DeSearch Tokens for the second vote\n//         } else if (voteCount == 3) {\n//             return 100; // 100 DeSearch Tokens for the third vote\n//         } else if (voteCount == 4) {\n//             return 250; // 250 DeSearch Tokens for the fourth vote\n//         } else {\n//             return 0; // No additional tokens required for more than 4 votes\n//         }\n//     }\n\n//     function fundToWinner(uint256 projectId) public onlyOwner {\n//         require(projectId < numberOfProjects, \"Invalid project ID\");\n\n//         ResearchProject storage project = researchProjects[projectId];\n//         require(project.totalVotes > 0, \"Project has no votes\");\n\n//         address winner = address(0);\n//         uint256 highestVotes = 0;\n\n//         for (uint256 i = 0; i < numberOfProjects; i++) {\n//             if (researchProjects[i].totalVotes > highestVotes) {\n//                 highestVotes = researchProjects[i].totalVotes;\n//                 winner = researchProjects[i].researcher;\n//             }\n//         }\n\n//         require(winner != address(0), \"No winner found\");\n\n//         // Transfer funds to the winner's address\n//         uint256 fundAmount = calculateFundAmount(project.totalVotes);\n//         tokenContract.transfer(winner, fundAmount);\n//     }\n\n//     function calculateFundAmount(uint256 voteCount)\n//         internal\n//         pure\n//         returns (uint256)\n//     {\n//         // Define the fund amount based on vote count\n//         if (voteCount == 1) {\n//             return 100; // Fund amount for the first vote\n//         } else if (voteCount == 2) {\n//             return 200; // Fund amount for the second vote\n//         } else if (voteCount == 3) {\n//             return 300; // Fund amount for the third vote\n//         } else if (voteCount == 4) {\n//             return 400; // Fund amount for the fourth vote\n//         } else {\n//             return 0; // No fund for more than 4 votes\n//         }\n//     }\n// }\n\n\n// //Test Token\n\n\n\n// pragma solidity ^0.8.9;\n\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n// contract DeSearch is ERC20, ERC20Burnable, Ownable {\n//     using SafeMath for uint256;\n\n//     uint256 public tokenPrice;\n\n//     constructor(uint256 initialSupply, uint256 initialTokenPrice)\n//         ERC20(\"DeSearch\", \"DS\")\n//     {\n//         require(initialSupply > 0, \"Initial supply must be greater than zero\");\n//         _mint(msg.sender, initialSupply);\n//         tokenPrice = initialTokenPrice.div(10**18);\n//     }\n\n//     function mint(address to, uint256 amount) public onlyOwner {\n//         _mint(to, amount);\n//     }\n\n//     function setTokenPrice(uint256 newTokenPrice) public onlyOwner {\n//         tokenPrice = newTokenPrice;\n//     }\n\n//     function withdrawTokens(uint256 amount) public onlyOwner {\n//         require(\n//             amount <= balanceOf(address(this)),\n//             \"Insufficient contract balance\"\n//         );\n//         _transfer(address(this), owner(), amount);\n//     }\n\n//     function tokenTransfer(address to, uint256 amount) public onlyOwner {\n//         _transfer(owner(), to, amount);\n//     }\n\n//     function buyTokens() public payable {\n//         require(msg.value > 0, \"Amount must be greater than zero\");\n\n//         uint256 tokenAmount = msg.value.mul(10**18).div(tokenPrice);\n//         _transfer(owner(), msg.sender, tokenAmount);\n//     }\n\n//     function sellTokens(uint256 amount) public {\n//         require(amount > 0, \"Amount must be greater than zero\");\n\n//         uint256 ethAmount = amount.mul(tokenPrice).div(10**18);\n//         _transfer(msg.sender, owner(), amount);\n//         payable(msg.sender).transfer(ethAmount);\n//     }\n\n//     // SafeMath Library for addition and subtraction operations\n//     function _transfer(\n//         address from,\n//         address to,\n//         uint256 amount\n//     ) internal override {\n//         super._transfer(from, to, amount);\n//     }\n\n//     function _mint(address account, uint256 amount) internal override {\n//         super._mint(account, amount);\n//     }\n// }\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.18;\"\n--> Final Smart Contract/testDAO.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.18;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "Final Smart Contract/testDAO.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"Final Smart Contract/testDAO.sol": {
				"ast": {
					"absolutePath": "Final Smart Contract/testDAO.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "9136:0:0"
				},
				"id": 0
			}
		}
	}
}